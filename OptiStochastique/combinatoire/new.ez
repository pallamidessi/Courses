/* vim:syntax=cpp:filetype=cpp
*/

/**
 * @file ppsn.ez
 * @author Pallamidessi Joseph, Ersfeld Thomas
 * @version 1.0
 *
 * @section LICENSE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details at
 * http://www.gnu.org/copyleft/gpl.html
**/  


/*_____________________________________________________________

Optimisation using genetic algorithm of the paper/reviewer 
combinationary problem for the future CS-DC'15 conference

This program will be integrated to a Django appplication to easily 
add reviewers and papers, as well as display the optimization result.

We are using a BRKGA[1]-like technique.

[1] Gonçalves, José Fernando, and Mauricio GC Resende. 
    "Biased random-key genetic algorithms for combinatorial optimization." 
    Journal of Heuristics 17.5 (2011): 487-525.
_______________________________________________________________*/

\User declarations : 
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#define MAX_PAPER_PER_REVIEWER 3
#define REVIEWER_CAPACITY 6
#define MAX_REVIEWER 200
  
  float pMutPerGene = 0.01;

  class Paper {
    public:
      int idPaper;
      std::string title;
      std::string authorName;
      std::string institution;
      std::vector<std::string> keywords;
      
      bool operator==(int id) const {
        return (id == this->idPaper);
      }

      Paper(int id,
            std::string title,
            std::string authorName,
            std::string institution,
            std::vector<std::string> keywords){
        this->idPaper = id;
        this->title = title;
        this->authorName = authorName;
        this->institution = institution;
        this->keywords = keywords;
      }

  };

  class ReviewerInfo {
    public:
      int idReviewer;
      std::string name;
      std::string institution;
      std::vector<std::string> keywords;
      std::vector<int> wantedPapers;
      std::vector<int> unwantedPapers;
      
      bool operator==(int id) const{
        return (id == this->idReviewer); 
      }

      ReviewerInfo( int id, 
                std::string name,
                std::string institution,
                std::vector<std::string> keywords,
                std::vector<int> wantedPapers,
                std::vector<int> unwantedPapers){
        this->idReviewer = id;
        this->name = name;
        this->institution = institution;
        this->keywords = keywords;
        this->wantedPapers = wantedPapers;
        this->unwantedPapers = unwantedPapers;
      }

  };
  
  /* Find a reviewer by its id in a vector */
  ReviewerInfo* getById(std::vector<ReviewerInfo*> review, int id){
    unsigned int i;

    for (i = 0; i < review.size(); i++) {
      if (*(review[i]) == id){
        return (review[i]);
      }
    }

    return NULL;
  }
  
  /* Find a paper by its id in a vector */
  Paper* getById(std::vector<Paper*> paper, int id){
    unsigned int i;
    
    for (i = 0; i < paper.size(); i++) {
      if (*(paper[i]) == id){
        return (paper[i]);
      }
    }

    return NULL;
  }
  
  /* Return the number of match between two vector of string (keywords) */
  int compareKeyword(Paper paper, ReviewerInfo reviewer){
    unsigned int i, j;
    int count = 0;

    for (i = 0; i < paper.keywords.size(); i++) {
      for (j = 0; j < reviewer.keywords.size(); j++) {
        if (paper.keywords[i] == reviewer.keywords[j]) {
          count++;
        }
      }
    }
    
    return count;
  }
  
  /* The global list that contains the data of the papers and reviewers
   * The genome only contains id to element inside 
   * to save space and computation time */
  std::vector<Paper*> vectorPaper;
  std::vector<ReviewerInfo*> vectorReviewer;

#include"parsing.cpp"

\end

\User functions:
  
  /* Shuffle a vector of int using the Fisher-Yate algorithm */
  void fisherYateShuffle(std::vector<int>& src){
    int index;
    unsigned int i;

    for (i = 0; i < (src.size() - 1) ; i++) {
      index = random(i, (int) (src.size() - 1));

      std::swap(src[i], src[index]);
    }
  }
  
  void swap(){
  }

\end

\User CUDA:
/* TODO: Copy the vector to CUDA memory*/
\end


\User classes :
  
  Reviewer {
    int nbPaper;
    int idReviewer;
    int paperID[MAX_PAPER_PER_REVIEWER];
  } 

  GenomeClass {
    int nbReviewer;
    Reviewer reviewer[MAX_REVIEWER];
  }

\end


\Before everything else function:
  /**********************************************
   * Test data: they should by read from a file *
   * Using those constructor and logic          *
   * ********************************************/
  
	parsePapers("papers.txt");
	parseWilling("willing.txt");
	parseUnwilling("unwilling.txt");
	parseReviewer("review.txt");
  \end


\After everything else function:
  int i, j;
  /* Get the best individual of the last generation */
  IndividualImpl* indiv= ((IndividualImpl *)population->parents[0]);
 

  /*Pretty print its result */
  for (i = 0; i < MAX_REVIEWER; i++) {
    if (indiv->reviewer[i].idReviewer != -1) {
      Paper currentPaper = *(getById(vectorPaper, indiv->reviewer[i].idReviewer));
      std::cout << "paper" << currentPaper.title << ", " << currentPaper.authorName << ", " << currentPaper.institution << std::endl;
      for (j = 0; j < MAX_PAPER_PER_REVIEWER; j++) {
        if (indiv->reviewer[i].paperID[j] != -1) {
          ReviewerInfo currentReviewer = *(getById(vectorReviewer, indiv->reviewer[i].paperID[j]));
          std::cout << "reviewer: " << currentReviewer.name << ", " << currentReviewer.institution << std::endl;
        }
      }
      std::cout << std::endl;
    }
  }

\end


\At the beginning of each generation function:
\end


\At the end of each generation function:
\end


\At each generation before reduce function:
\end


\GenomeClass::display:
\end


\GenomeClass::initialiser : 
  unsigned int i, j;
  std::vector<int> rndPaperID;
  
  /* Set every id to -1 (undefined)*/
  Genome.nbReviewer = 0;
  
  for (i = 0; i < MAX_REVIEWER; i++) {
    Genome.reviewer[i].nbPaper = 0;
    Genome.reviewer[i].idReviewer = -1;

    for (j = 0; j < MAX_PAPER_PER_REVIEWER; j++) {
      Genome.reviewer[i].paperID[j] = -1;
    }
  }
  
  /* Simple heuristics that tell the user if a correct optimization is possible 
   * ie: that every paper COULD be associated to a reviewer 
   */
  /* Genome could not contains all the reviewer wanted, must increse MAX_REVIEWER */
  if (vectorReviewer.size() > MAX_REVIEWER) {
    std::cout << "Not enough space for all loaded reviewer in genome : please increase MAX_REVIEWER" << std::endl;
  }
  
  /* Genome could not contains all the papers wanted, must increase the
   * MAX_REVIEWER/ MAX_PAPER_PER_REVIEWER macro */
  if (vectorPaper.size() > (MAX_REVIEWER * MAX_PAPER_PER_REVIEWER)) {
    std::cout << "Not enough space for all loaded papers in genome" << std::endl;
  }
  
  /*Create a vector with all paper id in it*/
  for (i = 0; i < vectorReviewer.size() ; i++) {
    rndPaperID.push_back(vectorReviewer[i]->idReviewer);  
  }
  
  /* Shuffle it !*/
  fisherYateShuffle(rndPaperID);
  
  /* Fill the reviewer with the paper id follow, if there not enough paper or
   * reviewer to fill, all the last ones will have the "canary" -1 as id 
   */
  for (i = 0; (i < vectorPaper.size()) && (i < MAX_REVIEWER); i++) {
    Genome.reviewer[i].idReviewer = vectorPaper[i]->idPaper;
    Genome.nbReviewer++;

    for (j = 0; j < MAX_PAPER_PER_REVIEWER; j++) {
      Genome.reviewer[i].paperID[j] = rndPaperID[random(0, rndPaperID.size())];
      Genome.reviewer[i].nbPaper++;
      //assignedPaper++;
    }
  }
\end


\GenomeClass::crossover : 
  int i, j;
  unsigned int positionPaper = (unsigned int) random(0, MAX_REVIEWER - 1);           // Picks a random reviewer position
  //unsigned int positionPaper = (unsigned int) random(0, MAX_PAPER_PER_REVIEWER - 1);    // Picks a random paper position
  j = positionPaper;                                                                    // Only for the first loop
  

  /* EASEA internal: the child is clone on parent1
   * Copy the element from the second parent after the randomly 
   * selected positions to the child 
   */
  for (i = positionPaper; i < MAX_REVIEWER; i++) {
    for (; j < MAX_PAPER_PER_REVIEWER; j++) {
      child.reviewer[i].paperID[j] = parent2.reviewer[i].paperID[j];
    }
  }
\end


\GenomeClass::mutator : 
  int i,j;

  for (i = 0; i < MAX_REVIEWER; i++) {
    for (j = 0; j < MAX_PAPER_PER_REVIEWER; j++) {
      if(tossCoin(pMutPerGene)) {
        Genome.reviewer[i].paperID[j] = vectorReviewer[random(0, vectorReviewer.size())]->idReviewer;
      }
    }
  }
  
  return 0;
\end


\GenomeClass::evaluator : 
  int i, j, k;
  int keywordScore;
  int isWanted = 0;
  int isUnwanted = 0;
  int overload; 
  double score = 0.0;
  std::map<int,int> countParticipation;

  /* for each reviewer that compose the genome compute his "affinity" to the
   * papers he's assigned with
   */
  for (i = 0; i < MAX_REVIEWER; i++) {
    if (Genome.reviewer[i].idReviewer != -1) {
      Paper currentPaper = *(getById(vectorPaper, Genome.reviewer[i].idReviewer));
      for (j = 0; j < MAX_PAPER_PER_REVIEWER; j++) {
        if (Genome.reviewer[i].paperID[j] != -1) {

          /* Count the number of real paper per reviewer */
          countParticipation[Genome.reviewer[i].paperID[j]] ++;
          
          ReviewerInfo currentReviewer = *(getById(vectorReviewer, Genome.reviewer[i].paperID[j]));
          
          /* Gain one point per keyword matched*/
          keywordScore = compareKeyword(currentPaper, currentReviewer);
          
          /* No ill matching */
          if (keywordScore == 0) {
            score -= 10;
          }
          else {
            score += keywordScore / (currentPaper.keywords.size());
          }
          
          /* If the reviewer come from the same institution of the reviewed paper
           * set a very big penalty 
           */
          if (currentPaper.institution == currentReviewer.institution) {
            score -= 1000;
          }
          

          /* Check if reviewer already wanted to review this paper */
          isWanted = std::count( currentReviewer.wantedPapers.begin(),
                                currentReviewer.wantedPapers.end(), 
                                currentPaper.idPaper);

          if (isWanted) {
            score += 10;
          }
          
          /* Check if reviewer already refuse to review this paper */
          isUnwanted = std::count( currentReviewer.unwantedPapers.begin(),
                                  currentReviewer.unwantedPapers.end(), 
                                  currentPaper.idPaper);

          if (isUnwanted) {
            score -= 10;
          }
          
         /* Because we count ourself in the loop*/
         score += 1500; 
          for (k = 0; k < MAX_PAPER_PER_REVIEWER; k++) {
            if(Genome.reviewer[i].paperID[j] == Genome.reviewer[i].paperID[k]){
              score -= 1500; 
            }  
          }

        }
      }
    }
  }

  for(std::map<int, int>::iterator iter = countParticipation.begin(); iter != countParticipation.end(); ++iter){
    overload = iter->second - REVIEWER_CAPACITY;

    if(overload > 0);
      //score -= (1000 * (iter->second - REVIEWER_CAPACITY));
  }

  return score;
\end


\User Makefile options:
CXXFLAGS+= -std=c++11
\end


\Default run parameters :               // Please let the parameters appear in this order
  Number of generations : 100           // NB_GEN
  Time limit: 0 			                  // In seconds, 0 to deactivate
  Population size : 4096			          // POP_SIZE
  Offspring size : 4096                 // or a xx%
  Mutation probability : 1              // MUT_PROB
  Crossover probability : 1             // XOVER_PROB
  Evaluator goal : maximize             // maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%               // Percentage or absolute  
  Surviving offspring: 100%             // Percentage or absolute  
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			                  // Weak or Strong
  Elite: 1
  Print stats: true				              // Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				                // Default: 0

  Remote island model: false
  IP file: ip.txt 			                // List of IP:PORT of islands to send individuals to
  Migration probability: 0.33           // Probability of sending an individual per generation
  Server port : 2929

  Save population: false
  Start from file:false
\end

