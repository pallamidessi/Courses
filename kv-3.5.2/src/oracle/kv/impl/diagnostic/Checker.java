/*-
 *
 *  This file is part of Oracle NoSQL Database
 *  Copyright (C) 2011, 2015 Oracle and/or its affiliates.  All rights reserved.
 *
 *  Oracle NoSQL Database is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU Affero General Public License
 *  as published by the Free Software Foundation, version 3.
 *
 *  Oracle NoSQL Database is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public
 *  License in the LICENSE file along with Oracle NoSQL Database.  If not,
 *  see <http://www.gnu.org/licenses/>.
 *
 *  An active Oracle commercial licensing agreement for this product
 *  supercedes this license.
 *
 *  For more information please contact:
 *
 *  Vice President Legal, Development
 *  Oracle America, Inc.
 *  5OP-10
 *  500 Oracle Parkway
 *  Redwood Shores, CA 94065
 *
 *  or
 *
 *  berkeleydb-info_us@oracle.com
 *
 *  [This line intentionally left blank.]
 *  [This line intentionally left blank.]
 *  [This line intentionally left blank.]
 *  [This line intentionally left blank.]
 *  [This line intentionally left blank.]
 *  [This line intentionally left blank.]
 *  EOF
 *
 */

package oracle.kv.impl.diagnostic;

import java.util.concurrent.Callable;

/**
 * Encapsulates a definition and mechanism for checking a kind of parameters of 
 * boot configuration. Subclasses of Checker will define the different types of 
 * Checker that can be carried out.
 */

public abstract class Checker implements Callable<String> {
    private String NEW_LINE = "\n";
    
    /* Return immediately when get error message */
    private boolean returnImmediate;
    private String allMessage; 
    
    /*
     * check the parameters are valid or not, it is called in call(). When 
     * there is an error found, it should return a non-null value.
     */
    public abstract String check() throws Exception;
    
    public Checker(boolean returnImmediate) {
        this.returnImmediate = returnImmediate;
    }

    public void setReturnImmediate(boolean returnImmediate) {
        this.returnImmediate = returnImmediate;
    }
    
    /**
     * Aggregate all error messages when executing
     * 
     * @param retMessage
     */
    protected void aggregateMessage(String retMessage) {
        if (!returnImmediate) {
            if (retMessage != null && !retMessage.isEmpty()) {
                if (allMessage == null || allMessage.isEmpty()) {
                    allMessage = retMessage;
                } else {
                    allMessage += (NEW_LINE + retMessage);
                }
            }
        } else {
            allMessage = retMessage;
        }
    }
    
    /**
     * Determines whether the checker should continue its verification or not. 
     * A non-null retMessage means that a check found a problem. Verification 
     * should continue if the -force flag was set, or if the retMessage is 
     * empty or null.
     * 
     * @param retMessage
     */
    protected boolean shouldStopCheck(String retMessage) {
        if (!returnImmediate) {
            return false;
        }
        
        if (retMessage != null && !retMessage.isEmpty()) {
            return true;
        }
        return false;
    }
    
    /**
     * Get message generated in thread
     * 
     * @return message generated by the thread
     */
    protected String getMessage() {
        if (allMessage == null)
            return allMessage;
        return allMessage.trim();
    }
    
    @Override
    public String call() throws Exception {
        return check();
    }
}
